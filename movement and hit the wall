#define WIDTH 40
#define HEIGHT 20
struct Point{
 int x,y;
};
enum class Direction
{
up,
right,
down,
left
};
Point apple;
Point prevTail;
vector<Point> snake = {
Point{ WIDTH / 2 + 2, HEIGHT / 2 },
Point{ WIDTH / 2 + 1, HEIGHT / 2 },
Point{ WIDTH / 2, HEIGHT / 2 },
Point{ WIDTH / 2 - 1, HEIGHT / 2 },
Point{ WIDTH / 2 - 2, HEIGHT / 2 }
};
Direction direction = Direction::right;
int score = 0;
int speed = 300;
// di chuyển
void move()
{
prevTail = snake.back(); // lưu lại phần đuôi cũ
for (size_t i = snake.size() - 1; i > 0; i--)
snake[i] = snake[i - 1];
if (direction == Direction::up)
snake[0].y -= 1;
else if (direction == Direction::down)
snake[0].y += 1;
else if (direction == Direction::left)
snake[0].x -= 1;
else if (direction == Direction::right)
snake[0].x += 1;
}
// xóa đầu và vẽ lại đuôi khi rắn di chuyển
void drawHeadnTail()
{
gotoxy(snake[0].x, snake[0].y);
cout << BODY;
gotoxy(prevTail.x, prevTail.y);
cout << ' '; // xóa đuôi cũ đi
}
// rắn đụng đầu
bool isHitWall()
{
return snake[0].x == 0 || snake[0].y == 0 || snake[0].x == WIDTH || snake[0].y == HEIGHT;
}
