#include<iostream>
#include <windows.h>
#include <cstdlib>
#include <cstring>
#include <conio.h>
#include <vector>
#include <time.h>
#include <random>

using namespace std;

#define WIDTH 40
#define HEIGHT 20
#define BODY 'X'
#define MOI '@'

struct Point{
    int x,y;
};

enum class Direction
 {
	up,
	right,
	down,
	left
};

Point apple;
Point prevTail;

vector<Point> snake = {
	Point{ WIDTH / 2 + 2, HEIGHT / 2 },
	Point{ WIDTH / 2 + 1, HEIGHT / 2 },
	Point{ WIDTH / 2, HEIGHT / 2 },
	Point{ WIDTH / 2 - 1, HEIGHT / 2 },
	Point{ WIDTH / 2 - 2, HEIGHT / 2 }
};
Direction direction = Direction::right;

int score = 0;
int speed = 300;

void gotoxy(int, int);
void ShowConsoleCursor(bool);

// Vẽ rắn
void drawSnakePart(Point);
void drawSnake();

// Vẽ khung 
void drawBox();
void displayScore();

// Ăn mồi và lớn 
void genApple();
bool isAteApple();
void growing();

// di chuyển 
void move();
bool isHitWall();
void drawHeadnTail();

// hàm khởi chạy game 
void startGame();
void resetSnake();

// Menu Start và End 
void showStartMenu();
void showEndMenu();


int main(){
	showStartMenu();
	return 0;
}

void gotoxy(int x, int y)
{
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(
		GetStdHandle(STD_OUTPUT_HANDLE),
		coord
	);
}

void ShowConsoleCursor(bool showFlag)
{
	HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cursorInfo;
	GetConsoleCursorInfo(out, &cursorInfo);
	cursorInfo.bVisible = showFlag;
	SetConsoleCursorInfo(out, &cursorInfo);
}

// vẽ từng phần của rắn
void drawSnakePart(Point p)
{
	gotoxy(p.x, p.y);
	cout << BODY;
}

// vẽ cả con rắn
void drawSnake()
{
	for (size_t i = 0; i < snake.size(); i++)
		drawSnakePart(snake[i]);
}

// vẽ khung 
void drawBox()
{
	for (size_t i = 0; i < WIDTH; i++)
		cout << '#';
	gotoxy(0, HEIGHT);
	for (size_t i = 0; i < WIDTH; i++)
		cout << '#';
	for (size_t i = 1; i < HEIGHT; i++)
	{
		gotoxy(0, i);
		cout << '#';
	}
	for (size_t i = 1; i < HEIGHT; i++)
	{
		gotoxy(WIDTH, i);
		cout << '#';
	}
}

// bảng điểm số 
void displayScore()
{
	gotoxy(WIDTH + 5, 2);
	cout << "Diem cua ban la: " << score;
}

// ăn mồi
void genApple()
{
	srand(time(0));
	int x = rand() % (WIDTH - 1) + 1;
	int y = rand() % (HEIGHT - 1) + 1;
	apple = {
		x,
		y,
	};
	gotoxy(x, y);
	cout << MOI;
}

// kiểm tra đã ăn mồi chưa 
bool isAteApple()
{
	return snake[0].x == apple.x && snake[0].y == apple.y;
}

// rắn tăng trưởng sau mỗi lần đớp mồi 
void growing()
{
	snake.push_back(prevTail);
}

// di chuyển 
void move()
{
	prevTail = snake.back(); // lưu lại phần đuôi cũ 
	
	for (size_t i = snake.size() - 1; i > 0; i--)
		snake[i] = snake[i - 1];
	if (direction == Direction::up)
		snake[0].y -= 1;
	else if (direction == Direction::down)
		snake[0].y += 1;
	else if (direction == Direction::left)
		snake[0].x -= 1;
	else if (direction == Direction::right)
		snake[0].x += 1;
}

// rắn đụng đàu 
bool isHitWall()
{
	return snake[0].x == 0 || snake[0].y == 0 || snake[0].x == WIDTH || snake[0].y == HEIGHT;
}

// xóa đầu và vẽ lại đuôi khi rắn di chuyển
void drawHeadnTail()
{
	gotoxy(snake[0].x, snake[0].y);
	cout << BODY;
	gotoxy(prevTail.x, prevTail.y);
	cout << ' '; // xóa đuôi cũ đi 
}

// main game 
void startGame()
{
	system("cls");
	ShowConsoleCursor(false);

	drawBox();
	drawSnake();
	genApple();
	displayScore();

	while (true)
	{
		if (_kbhit())
		{
			char ch = _getch();
			ch = tolower(ch);
			if (ch == 'a' && direction != Direction::right)
				direction = Direction::left;
			else if (ch == 'w' && direction != Direction::down)
				direction = Direction::up;
			else if (ch == 's' && direction != Direction::up)
				direction = Direction::down;
			else if (ch == 'd' && direction != Direction::left)
				direction = Direction::right;
			else if (ch == 't') // chuc nang thoat game
			{
				showEndMenu();
				break;
			}
		}
		move();
		drawHeadnTail();
		if (isAteApple())
		{
			score++;
			displayScore();
			growing();
			genApple();
		}
		
		if (isHitWall())
		{
			ShowConsoleCursor(true);
			showEndMenu();
			break;
		}
	
		Sleep(speed);
	}
}

// khởi tạo lại rắn nếu tiếp tục chơi sau khi thua 
void resetSnake()
{
	score = 0;
	direction = Direction::right;
	snake = {
		Point{ WIDTH / 2 + 2, HEIGHT / 2 },
		Point{ WIDTH / 2 + 1, HEIGHT / 2 },
		Point{ WIDTH / 2, HEIGHT / 2 },
		Point{ WIDTH / 2 - 1, HEIGHT / 2 },
		Point{ WIDTH / 2 - 2, HEIGHT / 2 }
	};
}

// màn hình bắt đầu trò chơi 
void showStartMenu()
{
	system("cls");
	cout << "Chao mung ban den voi game con ran cua nhom bon minh!" << endl;
	cout << "Moi ban lua chon:" << endl;
	cout << "1. Bat dau vao choi." << endl;
	cout << "2. Thoat." << endl;
	cout << "Lua chon cua ban la: ";
	int option;
	cin >> option;
	if (option == 1)
	{
		system("cls");
		cout << "Chung toi co 5 level, level cang cao thi toc do cang cao. " << endl;
		cout << "Hay chon level cho minh (1 - 5): ";
		int t;
		cin >> t;
		speed = 600 - t * 100; // công thức tính tốc độ tùy vào level được chọn 
		system("cls");
		cout << "Tip: Trong khi choi, ban co the an 't' de thoat ngay" << endl;
		cout << "Neu ban dam vao tuong, ban se chet ngay day, nen dung dai dot :)" << endl;
		cout << "Cach choi: " << endl;
		cout << "w: len" << endl;
		cout << "s: xuong" << endl;
		cout << "a: qua trai" << endl;
		cout << "d: qua phai" << endl;
		gotoxy(0, 9);
		cout << "Ready!";
		gotoxy(0, 9);
		cout << "      ";
		gotoxy(0, 9);
		cout << "GO!";
		Sleep(1000);
		startGame();
	}
	else if (option == 2)
		exit(1);
}

// màn hình kết thúc
void showEndMenu()
{
	system("cls");
	gotoxy(0, 0);
	cout << "Game over!" << endl;
	cout << "Diem cua ban la: " << score << endl;
	cout << "Ban co muon choi lai khong?(1: yes; 0: no) ([1]/[0]): ";
	char option;
	cin >> option;
	option = tolower(option);
	if (option == '1')
	{
		resetSnake();
		startGame();
	}
	else if (option == '0')
		exit(1);
} 
